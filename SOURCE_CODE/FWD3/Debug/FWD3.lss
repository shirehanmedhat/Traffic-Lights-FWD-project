
FWD3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ebc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ebc  00000f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a10  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ced  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 53 07 	call	0xea6	; 0xea6 <main>
  7a:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <TIMER0_INIT_DELAY_halfseconds>:
 */
#include "../MISC/STD_Types.h"
#include "../MISC/Utils.h"
#include "TIMER.h"
void TIMER0_INIT_DELAY_halfseconds(char numOfhalfSeconds)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <TIMER0_INIT_DELAY_halfseconds+0x6>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	8a 83       	std	Y+2, r24	; 0x02
	Set_Bit (TCCR0 , FOC0); // NOT PWM MODE
  8e:	a3 e5       	ldi	r26, 0x53	; 83
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e3 e5       	ldi	r30, 0x53	; 83
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	90 81       	ld	r25, Z
  98:	e3 e5       	ldi	r30, 0x53	; 83
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	89 2b       	or	r24, r25
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8c 93       	st	X, r24
	Set_Bit (TCCR0 , CS00); //1024
  a4:	a3 e5       	ldi	r26, 0x53	; 83
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e3 e5       	ldi	r30, 0x53	; 83
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	e3 e5       	ldi	r30, 0x53	; 83
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	89 2b       	or	r24, r25
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	8c 93       	st	X, r24
	Set_Bit (TCCR0 , CS02);//1024
  ba:	a3 e5       	ldi	r26, 0x53	; 83
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e3 e5       	ldi	r30, 0x53	; 83
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	e3 e5       	ldi	r30, 0x53	; 83
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	89 2b       	or	r24, r25
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8c 93       	st	X, r24
	TCNT0 =6; //
  d0:	e2 e5       	ldi	r30, 0x52	; 82
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
	for (char i=0 ; i<2*numOfhalfSeconds ; i++)
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	0c c0       	rjmp	.+24     	; 0xf4 <TIMER0_INIT_DELAY_halfseconds+0x72>
	{
		 while (TCNT0 !=250);
  dc:	e2 e5       	ldi	r30, 0x52	; 82
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8a 3f       	cpi	r24, 0xFA	; 250
  e4:	d9 f7       	brne	.-10     	; 0xdc <TIMER0_INIT_DELAY_halfseconds+0x5a>
		 TCNT0=6;
  e6:	e2 e5       	ldi	r30, 0x52	; 82
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 83       	st	Z, r24
{
	Set_Bit (TCCR0 , FOC0); // NOT PWM MODE
	Set_Bit (TCCR0 , CS00); //1024
	Set_Bit (TCCR0 , CS02);//1024
	TCNT0 =6; //
	for (char i=0 ; i<2*numOfhalfSeconds ; i++)
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4c f3       	brlt	.-46     	; 0xdc <TIMER0_INIT_DELAY_halfseconds+0x5a>
	{
		 while (TCNT0 !=250);
		 TCNT0=6;
	}

}
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <EXI0_INIT>:
#include "../DIO/DIO.h"
#include "EX_I.h"
//#include "avr/interrupt.h"

void EXI0_INIT(void)
{
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection (DIO_u8_PORTD , DIO_u8_PIN2 , DIO_u8_INPUT );
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
	Set_Bit (MCUCR ,ISC01 );
 126:	a5 e5       	ldi	r26, 0x55	; 85
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e5 e5       	ldi	r30, 0x55	; 85
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	e5 e5       	ldi	r30, 0x55	; 85
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	89 2b       	or	r24, r25
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	8c 93       	st	X, r24
  //Set_Bit (MCUCR ,ISC00 );
	Set_Bit (GICR ,INT0 );
 13c:	ab e5       	ldi	r26, 0x5B	; 91
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	eb e5       	ldi	r30, 0x5B	; 91
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	eb e5       	ldi	r30, 0x5B	; 91
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	89 2b       	or	r24, r25
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	8c 93       	st	X, r24
	Set_Bit (SREG ,ISREG );
 152:	af e5       	ldi	r26, 0x5F	; 95
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	ef e5       	ldi	r30, 0x5F	; 95
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	90 81       	ld	r25, Z
 15c:	ef e5       	ldi	r30, 0x5F	; 95
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	89 2b       	or	r24, r25
 164:	80 68       	ori	r24, 0x80	; 128
 166:	8c 93       	st	X, r24

}
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <EXI0_DISABLE>:
void EXI0_DISABLE (void)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	GICR &= ~ (1<<INT0);
 176:	ab e5       	ldi	r26, 0x5B	; 91
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	eb e5       	ldi	r30, 0x5B	; 91
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	8c 93       	st	X, r24
}
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	08 95       	ret

0000018a <GLOBAL_INTERRUPT_ENABLE>:

void GLOBAL_INTERRUPT_ENABLE (void)
{
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
	Set_Bit (SREG ,ISREG );
 192:	af e5       	ldi	r26, 0x5F	; 95
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ef e5       	ldi	r30, 0x5F	; 95
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	90 81       	ld	r25, Z
 19c:	ef e5       	ldi	r30, 0x5F	; 95
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	89 2b       	or	r24, r25
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	8c 93       	st	X, r24
}
 1a8:	cf 91       	pop	r28
 1aa:	df 91       	pop	r29
 1ac:	08 95       	ret

000001ae <GLOBAL_INTERRUPT_DISABLE>:

void GLOBAL_INTERRUPT_DISABLE (void)
{
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit (SREG ,ISREG );
 1b6:	af e5       	ldi	r26, 0x5F	; 95
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	ef e5       	ldi	r30, 0x5F	; 95
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8f 77       	andi	r24, 0x7F	; 127
 1c2:	8c 93       	st	X, r24
}
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <SET_INTERRUPT_FLAGE>:

void SET_INTERRUPT_FLAGE (void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62

	Set_Bit (GIFR ,INTF0 );
 1d2:	aa e5       	ldi	r26, 0x5A	; 90
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	ea e5       	ldi	r30, 0x5A	; 90
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	ea e5       	ldi	r30, 0x5A	; 90
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	89 2b       	or	r24, r25
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	8c 93       	st	X, r24
}
 1e8:	cf 91       	pop	r28
 1ea:	df 91       	pop	r29
 1ec:	08 95       	ret

000001ee <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId, u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	2e 97       	sbiw	r28, 0x0e	; 14
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	8a 83       	std	Y+2, r24	; 0x02
 204:	6b 83       	std	Y+3, r22	; 0x03
 206:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYPES_OK ;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	84 30       	cpi	r24, 0x04	; 4
 210:	08 f0       	brcs	.+2      	; 0x214 <DIO_u8SetPinDirection+0x26>
 212:	20 c1       	rjmp	.+576    	; 0x454 <DIO_u8SetPinDirection+0x266>
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	88 30       	cpi	r24, 0x08	; 8
 218:	08 f0       	brcs	.+2      	; 0x21c <DIO_u8SetPinDirection+0x2e>
 21a:	1c c1       	rjmp	.+568    	; 0x454 <DIO_u8SetPinDirection+0x266>
 21c:	8c 81       	ldd	r24, Y+4	; 0x04
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	21 f0       	breq	.+8      	; 0x22a <DIO_u8SetPinDirection+0x3c>
 222:	8c 81       	ldd	r24, Y+4	; 0x04
 224:	88 23       	and	r24, r24
 226:	09 f0       	breq	.+2      	; 0x22a <DIO_u8SetPinDirection+0x3c>
 228:	15 c1       	rjmp	.+554    	; 0x454 <DIO_u8SetPinDirection+0x266>
	{
		switch (Copy_u8PortId)
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	3e 87       	std	Y+14, r19	; 0x0e
 232:	2d 87       	std	Y+13, r18	; 0x0d
 234:	8d 85       	ldd	r24, Y+13	; 0x0d
 236:	9e 85       	ldd	r25, Y+14	; 0x0e
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	91 05       	cpc	r25, r1
 23c:	09 f4       	brne	.+2      	; 0x240 <DIO_u8SetPinDirection+0x52>
 23e:	54 c0       	rjmp	.+168    	; 0x2e8 <DIO_u8SetPinDirection+0xfa>
 240:	2d 85       	ldd	r18, Y+13	; 0x0d
 242:	3e 85       	ldd	r19, Y+14	; 0x0e
 244:	22 30       	cpi	r18, 0x02	; 2
 246:	31 05       	cpc	r19, r1
 248:	2c f4       	brge	.+10     	; 0x254 <DIO_u8SetPinDirection+0x66>
 24a:	8d 85       	ldd	r24, Y+13	; 0x0d
 24c:	9e 85       	ldd	r25, Y+14	; 0x0e
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	71 f0       	breq	.+28     	; 0x26e <DIO_u8SetPinDirection+0x80>
 252:	01 c1       	rjmp	.+514    	; 0x456 <DIO_u8SetPinDirection+0x268>
 254:	2d 85       	ldd	r18, Y+13	; 0x0d
 256:	3e 85       	ldd	r19, Y+14	; 0x0e
 258:	22 30       	cpi	r18, 0x02	; 2
 25a:	31 05       	cpc	r19, r1
 25c:	09 f4       	brne	.+2      	; 0x260 <DIO_u8SetPinDirection+0x72>
 25e:	81 c0       	rjmp	.+258    	; 0x362 <DIO_u8SetPinDirection+0x174>
 260:	8d 85       	ldd	r24, Y+13	; 0x0d
 262:	9e 85       	ldd	r25, Y+14	; 0x0e
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	91 05       	cpc	r25, r1
 268:	09 f4       	brne	.+2      	; 0x26c <DIO_u8SetPinDirection+0x7e>
 26a:	b8 c0       	rjmp	.+368    	; 0x3dc <DIO_u8SetPinDirection+0x1ee>
 26c:	f4 c0       	rjmp	.+488    	; 0x456 <DIO_u8SetPinDirection+0x268>
		{
		case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	3c 87       	std	Y+12, r19	; 0x0c
 276:	2b 87       	std	Y+11, r18	; 0x0b
 278:	8b 85       	ldd	r24, Y+11	; 0x0b
 27a:	9c 85       	ldd	r25, Y+12	; 0x0c
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	f9 f0       	breq	.+62     	; 0x2be <DIO_u8SetPinDirection+0xd0>
 280:	2b 85       	ldd	r18, Y+11	; 0x0b
 282:	3c 85       	ldd	r19, Y+12	; 0x0c
 284:	21 30       	cpi	r18, 0x01	; 1
 286:	31 05       	cpc	r19, r1
 288:	09 f0       	breq	.+2      	; 0x28c <DIO_u8SetPinDirection+0x9e>
 28a:	e5 c0       	rjmp	.+458    	; 0x456 <DIO_u8SetPinDirection+0x268>
			{
				case DIO_u8_OUTPUT: Set_Bit( DIO_u8_DDRA_REG,Copy_u8PinId);break;
 28c:	aa e3       	ldi	r26, 0x3A	; 58
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	ea e3       	ldi	r30, 0x3A	; 58
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	48 2f       	mov	r20, r24
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 2e       	mov	r0, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8SetPinDirection+0xbc>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8SetPinDirection+0xb8>
 2ae:	98 2f       	mov	r25, r24
 2b0:	ea e3       	ldi	r30, 0x3A	; 58
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	89 2b       	or	r24, r25
 2b8:	84 2b       	or	r24, r20
 2ba:	8c 93       	st	X, r24
 2bc:	cc c0       	rjmp	.+408    	; 0x456 <DIO_u8SetPinDirection+0x268>
				case DIO_u8_INPUT : Clr_Bit( DIO_u8_DDRA_REG,Copy_u8PinId);break;
 2be:	aa e3       	ldi	r26, 0x3A	; 58
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	ea e3       	ldi	r30, 0x3A	; 58
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_u8SetPinDirection+0xee>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_u8SetPinDirection+0xea>
 2e0:	80 95       	com	r24
 2e2:	84 23       	and	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	b7 c0       	rjmp	.+366    	; 0x456 <DIO_u8SetPinDirection+0x268>
			}
			break;

		case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
 2e8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	3a 87       	std	Y+10, r19	; 0x0a
 2f0:	29 87       	std	Y+9, r18	; 0x09
 2f2:	89 85       	ldd	r24, Y+9	; 0x09
 2f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	f9 f0       	breq	.+62     	; 0x338 <DIO_u8SetPinDirection+0x14a>
 2fa:	29 85       	ldd	r18, Y+9	; 0x09
 2fc:	3a 85       	ldd	r19, Y+10	; 0x0a
 2fe:	21 30       	cpi	r18, 0x01	; 1
 300:	31 05       	cpc	r19, r1
 302:	09 f0       	breq	.+2      	; 0x306 <DIO_u8SetPinDirection+0x118>
 304:	a8 c0       	rjmp	.+336    	; 0x456 <DIO_u8SetPinDirection+0x268>
			{
				case DIO_u8_OUTPUT: Set_Bit( DIO_u8_DDRB_REG,Copy_u8PinId);break;
 306:	a7 e3       	ldi	r26, 0x37	; 55
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e7 e3       	ldi	r30, 0x37	; 55
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	48 2f       	mov	r20, r24
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_u8SetPinDirection+0x136>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_u8SetPinDirection+0x132>
 328:	98 2f       	mov	r25, r24
 32a:	e7 e3       	ldi	r30, 0x37	; 55
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	89 2b       	or	r24, r25
 332:	84 2b       	or	r24, r20
 334:	8c 93       	st	X, r24
 336:	8f c0       	rjmp	.+286    	; 0x456 <DIO_u8SetPinDirection+0x268>
				case DIO_u8_INPUT : Clr_Bit( DIO_u8_DDRB_REG,Copy_u8PinId);break;
 338:	a7 e3       	ldi	r26, 0x37	; 55
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	e7 e3       	ldi	r30, 0x37	; 55
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	48 2f       	mov	r20, r24
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 2e       	mov	r0, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8SetPinDirection+0x168>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	0a 94       	dec	r0
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_u8SetPinDirection+0x164>
 35a:	80 95       	com	r24
 35c:	84 23       	and	r24, r20
 35e:	8c 93       	st	X, r24
 360:	7a c0       	rjmp	.+244    	; 0x456 <DIO_u8SetPinDirection+0x268>
		    }
			break;

		case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
 362:	8c 81       	ldd	r24, Y+4	; 0x04
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	38 87       	std	Y+8, r19	; 0x08
 36a:	2f 83       	std	Y+7, r18	; 0x07
 36c:	8f 81       	ldd	r24, Y+7	; 0x07
 36e:	98 85       	ldd	r25, Y+8	; 0x08
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	f9 f0       	breq	.+62     	; 0x3b2 <DIO_u8SetPinDirection+0x1c4>
 374:	2f 81       	ldd	r18, Y+7	; 0x07
 376:	38 85       	ldd	r19, Y+8	; 0x08
 378:	21 30       	cpi	r18, 0x01	; 1
 37a:	31 05       	cpc	r19, r1
 37c:	09 f0       	breq	.+2      	; 0x380 <DIO_u8SetPinDirection+0x192>
 37e:	6b c0       	rjmp	.+214    	; 0x456 <DIO_u8SetPinDirection+0x268>
			{
				case DIO_u8_OUTPUT: Set_Bit( DIO_u8_DDRC_REG,Copy_u8PinId);break;
 380:	a4 e3       	ldi	r26, 0x34	; 52
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	e4 e3       	ldi	r30, 0x34	; 52
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	48 2f       	mov	r20, r24
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 2e       	mov	r0, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_u8SetPinDirection+0x1b0>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_u8SetPinDirection+0x1ac>
 3a2:	98 2f       	mov	r25, r24
 3a4:	e4 e3       	ldi	r30, 0x34	; 52
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	89 2b       	or	r24, r25
 3ac:	84 2b       	or	r24, r20
 3ae:	8c 93       	st	X, r24
 3b0:	52 c0       	rjmp	.+164    	; 0x456 <DIO_u8SetPinDirection+0x268>
				case DIO_u8_INPUT : Clr_Bit( DIO_u8_DDRC_REG,Copy_u8PinId);break;
 3b2:	a4 e3       	ldi	r26, 0x34	; 52
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e4 e3       	ldi	r30, 0x34	; 52
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8SetPinDirection+0x1e2>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8SetPinDirection+0x1de>
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	3d c0       	rjmp	.+122    	; 0x456 <DIO_u8SetPinDirection+0x268>
		    }
			break;

		case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	3e 83       	std	Y+6, r19	; 0x06
 3e4:	2d 83       	std	Y+5, r18	; 0x05
 3e6:	8d 81       	ldd	r24, Y+5	; 0x05
 3e8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	f1 f0       	breq	.+60     	; 0x42a <DIO_u8SetPinDirection+0x23c>
 3ee:	2d 81       	ldd	r18, Y+5	; 0x05
 3f0:	3e 81       	ldd	r19, Y+6	; 0x06
 3f2:	21 30       	cpi	r18, 0x01	; 1
 3f4:	31 05       	cpc	r19, r1
 3f6:	79 f5       	brne	.+94     	; 0x456 <DIO_u8SetPinDirection+0x268>
			{
				case DIO_u8_OUTPUT: Set_Bit( DIO_u8_DDRD_REG,Copy_u8PinId);break;
 3f8:	a1 e3       	ldi	r26, 0x31	; 49
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	e1 e3       	ldi	r30, 0x31	; 49
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	48 2f       	mov	r20, r24
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 2e       	mov	r0, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_u8SetPinDirection+0x228>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_u8SetPinDirection+0x224>
 41a:	98 2f       	mov	r25, r24
 41c:	e1 e3       	ldi	r30, 0x31	; 49
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	89 2b       	or	r24, r25
 424:	84 2b       	or	r24, r20
 426:	8c 93       	st	X, r24
 428:	16 c0       	rjmp	.+44     	; 0x456 <DIO_u8SetPinDirection+0x268>
				case DIO_u8_INPUT : Clr_Bit( DIO_u8_DDRD_REG,Copy_u8PinId);break;
 42a:	a1 e3       	ldi	r26, 0x31	; 49
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e1 e3       	ldi	r30, 0x31	; 49
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 2e       	mov	r0, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_u8SetPinDirection+0x25a>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_u8SetPinDirection+0x256>
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	8c 93       	st	X, r24
 452:	01 c0       	rjmp	.+2      	; 0x456 <DIO_u8SetPinDirection+0x268>

	}

	else
	{
		Local_u8ErrorState=STD_TYPES_NOK ;
 454:	19 82       	std	Y+1, r1	; 0x01
	}
	 return Local_u8ErrorState;
 456:	89 81       	ldd	r24, Y+1	; 0x01

}
 458:	2e 96       	adiw	r28, 0x0e	; 14
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	cf 91       	pop	r28
 466:	df 91       	pop	r29
 468:	08 95       	ret

0000046a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue      (u8 Copy_u8PortId, u8 Copy_u8PinId , u8 Copy_u8PinValue)
{
 46a:	df 93       	push	r29
 46c:	cf 93       	push	r28
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	2e 97       	sbiw	r28, 0x0e	; 14
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	8a 83       	std	Y+2, r24	; 0x02
 480:	6b 83       	std	Y+3, r22	; 0x03
 482:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYPES_OK ;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId<=DIO_u8_PORTD )&& (Copy_u8PinId<=DIO_u8_PIN7)&&((Copy_u8PinValue==DIO_u8_HIGH)||(Copy_u8PinValue==DIO_u8_LOW)))
 488:	8a 81       	ldd	r24, Y+2	; 0x02
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	08 f0       	brcs	.+2      	; 0x490 <DIO_u8SetPinValue+0x26>
 48e:	20 c1       	rjmp	.+576    	; 0x6d0 <DIO_u8SetPinValue+0x266>
 490:	8b 81       	ldd	r24, Y+3	; 0x03
 492:	88 30       	cpi	r24, 0x08	; 8
 494:	08 f0       	brcs	.+2      	; 0x498 <DIO_u8SetPinValue+0x2e>
 496:	1c c1       	rjmp	.+568    	; 0x6d0 <DIO_u8SetPinValue+0x266>
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	21 f0       	breq	.+8      	; 0x4a6 <DIO_u8SetPinValue+0x3c>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	88 23       	and	r24, r24
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <DIO_u8SetPinValue+0x3c>
 4a4:	15 c1       	rjmp	.+554    	; 0x6d0 <DIO_u8SetPinValue+0x266>
	{
		switch(Copy_u8PortId)
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	3e 87       	std	Y+14, r19	; 0x0e
 4ae:	2d 87       	std	Y+13, r18	; 0x0d
 4b0:	8d 85       	ldd	r24, Y+13	; 0x0d
 4b2:	9e 85       	ldd	r25, Y+14	; 0x0e
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	91 05       	cpc	r25, r1
 4b8:	09 f4       	brne	.+2      	; 0x4bc <DIO_u8SetPinValue+0x52>
 4ba:	54 c0       	rjmp	.+168    	; 0x564 <DIO_u8SetPinValue+0xfa>
 4bc:	2d 85       	ldd	r18, Y+13	; 0x0d
 4be:	3e 85       	ldd	r19, Y+14	; 0x0e
 4c0:	22 30       	cpi	r18, 0x02	; 2
 4c2:	31 05       	cpc	r19, r1
 4c4:	2c f4       	brge	.+10     	; 0x4d0 <DIO_u8SetPinValue+0x66>
 4c6:	8d 85       	ldd	r24, Y+13	; 0x0d
 4c8:	9e 85       	ldd	r25, Y+14	; 0x0e
 4ca:	00 97       	sbiw	r24, 0x00	; 0
 4cc:	71 f0       	breq	.+28     	; 0x4ea <DIO_u8SetPinValue+0x80>
 4ce:	01 c1       	rjmp	.+514    	; 0x6d2 <DIO_u8SetPinValue+0x268>
 4d0:	2d 85       	ldd	r18, Y+13	; 0x0d
 4d2:	3e 85       	ldd	r19, Y+14	; 0x0e
 4d4:	22 30       	cpi	r18, 0x02	; 2
 4d6:	31 05       	cpc	r19, r1
 4d8:	09 f4       	brne	.+2      	; 0x4dc <DIO_u8SetPinValue+0x72>
 4da:	81 c0       	rjmp	.+258    	; 0x5de <DIO_u8SetPinValue+0x174>
 4dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 4de:	9e 85       	ldd	r25, Y+14	; 0x0e
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	91 05       	cpc	r25, r1
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <DIO_u8SetPinValue+0x7e>
 4e6:	b8 c0       	rjmp	.+368    	; 0x658 <DIO_u8SetPinValue+0x1ee>
 4e8:	f4 c0       	rjmp	.+488    	; 0x6d2 <DIO_u8SetPinValue+0x268>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinValue)
 4ea:	8c 81       	ldd	r24, Y+4	; 0x04
 4ec:	28 2f       	mov	r18, r24
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	3c 87       	std	Y+12, r19	; 0x0c
 4f2:	2b 87       	std	Y+11, r18	; 0x0b
 4f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 4f6:	9c 85       	ldd	r25, Y+12	; 0x0c
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	f9 f0       	breq	.+62     	; 0x53a <DIO_u8SetPinValue+0xd0>
 4fc:	2b 85       	ldd	r18, Y+11	; 0x0b
 4fe:	3c 85       	ldd	r19, Y+12	; 0x0c
 500:	21 30       	cpi	r18, 0x01	; 1
 502:	31 05       	cpc	r19, r1
 504:	09 f0       	breq	.+2      	; 0x508 <DIO_u8SetPinValue+0x9e>
 506:	e5 c0       	rjmp	.+458    	; 0x6d2 <DIO_u8SetPinValue+0x268>
			{
				case DIO_u8_HIGH:Set_Bit(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 508:	ab e3       	ldi	r26, 0x3B	; 59
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	eb e3       	ldi	r30, 0x3B	; 59
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	48 2f       	mov	r20, r24
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 2e       	mov	r0, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_u8SetPinValue+0xbc>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_u8SetPinValue+0xb8>
 52a:	98 2f       	mov	r25, r24
 52c:	eb e3       	ldi	r30, 0x3B	; 59
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	89 2b       	or	r24, r25
 534:	84 2b       	or	r24, r20
 536:	8c 93       	st	X, r24
 538:	cc c0       	rjmp	.+408    	; 0x6d2 <DIO_u8SetPinValue+0x268>
				case DIO_u8_LOW :Clr_Bit(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 53a:	ab e3       	ldi	r26, 0x3B	; 59
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	eb e3       	ldi	r30, 0x3B	; 59
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	48 2f       	mov	r20, r24
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 2e       	mov	r0, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_u8SetPinValue+0xee>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_u8SetPinValue+0xea>
 55c:	80 95       	com	r24
 55e:	84 23       	and	r24, r20
 560:	8c 93       	st	X, r24
 562:	b7 c0       	rjmp	.+366    	; 0x6d2 <DIO_u8SetPinValue+0x268>
			}
			break;

			case DIO_u8_PORTB:
			switch(Copy_u8PinValue)
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	3a 87       	std	Y+10, r19	; 0x0a
 56c:	29 87       	std	Y+9, r18	; 0x09
 56e:	89 85       	ldd	r24, Y+9	; 0x09
 570:	9a 85       	ldd	r25, Y+10	; 0x0a
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	f9 f0       	breq	.+62     	; 0x5b4 <DIO_u8SetPinValue+0x14a>
 576:	29 85       	ldd	r18, Y+9	; 0x09
 578:	3a 85       	ldd	r19, Y+10	; 0x0a
 57a:	21 30       	cpi	r18, 0x01	; 1
 57c:	31 05       	cpc	r19, r1
 57e:	09 f0       	breq	.+2      	; 0x582 <DIO_u8SetPinValue+0x118>
 580:	a8 c0       	rjmp	.+336    	; 0x6d2 <DIO_u8SetPinValue+0x268>
			{
				case DIO_u8_HIGH:Set_Bit(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 582:	a8 e3       	ldi	r26, 0x38	; 56
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e8 e3       	ldi	r30, 0x38	; 56
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	48 2f       	mov	r20, r24
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 2e       	mov	r0, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_u8SetPinValue+0x136>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_u8SetPinValue+0x132>
 5a4:	98 2f       	mov	r25, r24
 5a6:	e8 e3       	ldi	r30, 0x38	; 56
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	89 2b       	or	r24, r25
 5ae:	84 2b       	or	r24, r20
 5b0:	8c 93       	st	X, r24
 5b2:	8f c0       	rjmp	.+286    	; 0x6d2 <DIO_u8SetPinValue+0x268>
				case DIO_u8_LOW :Clr_Bit(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 5b4:	a8 e3       	ldi	r26, 0x38	; 56
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	e8 e3       	ldi	r30, 0x38	; 56
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	48 2f       	mov	r20, r24
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 2e       	mov	r0, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_u8SetPinValue+0x168>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	0a 94       	dec	r0
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_u8SetPinValue+0x164>
 5d6:	80 95       	com	r24
 5d8:	84 23       	and	r24, r20
 5da:	8c 93       	st	X, r24
 5dc:	7a c0       	rjmp	.+244    	; 0x6d2 <DIO_u8SetPinValue+0x268>
			}
			break;

			case DIO_u8_PORTC:
			switch(Copy_u8PinValue)
 5de:	8c 81       	ldd	r24, Y+4	; 0x04
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	38 87       	std	Y+8, r19	; 0x08
 5e6:	2f 83       	std	Y+7, r18	; 0x07
 5e8:	8f 81       	ldd	r24, Y+7	; 0x07
 5ea:	98 85       	ldd	r25, Y+8	; 0x08
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	f9 f0       	breq	.+62     	; 0x62e <DIO_u8SetPinValue+0x1c4>
 5f0:	2f 81       	ldd	r18, Y+7	; 0x07
 5f2:	38 85       	ldd	r19, Y+8	; 0x08
 5f4:	21 30       	cpi	r18, 0x01	; 1
 5f6:	31 05       	cpc	r19, r1
 5f8:	09 f0       	breq	.+2      	; 0x5fc <DIO_u8SetPinValue+0x192>
 5fa:	6b c0       	rjmp	.+214    	; 0x6d2 <DIO_u8SetPinValue+0x268>
			{
				case DIO_u8_HIGH:Set_Bit(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 5fc:	a5 e3       	ldi	r26, 0x35	; 53
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e5 e3       	ldi	r30, 0x35	; 53
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	48 2f       	mov	r20, r24
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 2e       	mov	r0, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_u8SetPinValue+0x1b0>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_u8SetPinValue+0x1ac>
 61e:	98 2f       	mov	r25, r24
 620:	e5 e3       	ldi	r30, 0x35	; 53
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	89 2b       	or	r24, r25
 628:	84 2b       	or	r24, r20
 62a:	8c 93       	st	X, r24
 62c:	52 c0       	rjmp	.+164    	; 0x6d2 <DIO_u8SetPinValue+0x268>
				case DIO_u8_LOW :Clr_Bit(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 62e:	a5 e3       	ldi	r26, 0x35	; 53
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	e5 e3       	ldi	r30, 0x35	; 53
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	48 2f       	mov	r20, r24
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 2e       	mov	r0, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_u8SetPinValue+0x1e2>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_u8SetPinValue+0x1de>
 650:	80 95       	com	r24
 652:	84 23       	and	r24, r20
 654:	8c 93       	st	X, r24
 656:	3d c0       	rjmp	.+122    	; 0x6d2 <DIO_u8SetPinValue+0x268>
			}
			break;

			case DIO_u8_PORTD:
			switch(Copy_u8PinValue)
 658:	8c 81       	ldd	r24, Y+4	; 0x04
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	3e 83       	std	Y+6, r19	; 0x06
 660:	2d 83       	std	Y+5, r18	; 0x05
 662:	8d 81       	ldd	r24, Y+5	; 0x05
 664:	9e 81       	ldd	r25, Y+6	; 0x06
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	f1 f0       	breq	.+60     	; 0x6a6 <DIO_u8SetPinValue+0x23c>
 66a:	2d 81       	ldd	r18, Y+5	; 0x05
 66c:	3e 81       	ldd	r19, Y+6	; 0x06
 66e:	21 30       	cpi	r18, 0x01	; 1
 670:	31 05       	cpc	r19, r1
 672:	79 f5       	brne	.+94     	; 0x6d2 <DIO_u8SetPinValue+0x268>
			{
				case DIO_u8_HIGH:Set_Bit(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 674:	a2 e3       	ldi	r26, 0x32	; 50
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	e2 e3       	ldi	r30, 0x32	; 50
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	48 2f       	mov	r20, r24
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	28 2f       	mov	r18, r24
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 2e       	mov	r0, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_u8SetPinValue+0x228>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	0a 94       	dec	r0
 694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_u8SetPinValue+0x224>
 696:	98 2f       	mov	r25, r24
 698:	e2 e3       	ldi	r30, 0x32	; 50
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 81       	ld	r24, Z
 69e:	89 2b       	or	r24, r25
 6a0:	84 2b       	or	r24, r20
 6a2:	8c 93       	st	X, r24
 6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <DIO_u8SetPinValue+0x268>
				case DIO_u8_LOW :Clr_Bit(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 6a6:	a2 e3       	ldi	r26, 0x32	; 50
 6a8:	b0 e0       	ldi	r27, 0x00	; 0
 6aa:	e2 e3       	ldi	r30, 0x32	; 50
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	48 2f       	mov	r20, r24
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 2e       	mov	r0, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_u8SetPinValue+0x25a>
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	0a 94       	dec	r0
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_u8SetPinValue+0x256>
 6c8:	80 95       	com	r24
 6ca:	84 23       	and	r24, r20
 6cc:	8c 93       	st	X, r24
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <DIO_u8SetPinValue+0x268>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOK ;
 6d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 6d4:	2e 96       	adiw	r28, 0x0e	; 14
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	cf 91       	pop	r28
 6e2:	df 91       	pop	r29
 6e4:	08 95       	ret

000006e6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortId , u8 Copy_u8PinId,u8 *Copy_u8ReturnedPinValue )
{
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	27 97       	sbiw	r28, 0x07	; 7
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	de bf       	out	0x3e, r29	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	8a 83       	std	Y+2, r24	; 0x02
 6fc:	6b 83       	std	Y+3, r22	; 0x03
 6fe:	5d 83       	std	Y+5, r21	; 0x05
 700:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYPES_OK;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId<=DIO_u8_PORTD)&&(Copy_u8PinId<=DIO_u8_PIN7)&&(Copy_u8ReturnedPinValue != NULL))
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	84 30       	cpi	r24, 0x04	; 4
 70a:	08 f0       	brcs	.+2      	; 0x70e <DIO_u8GetPinValue+0x28>
 70c:	7a c0       	rjmp	.+244    	; 0x802 <DIO_u8GetPinValue+0x11c>
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	88 30       	cpi	r24, 0x08	; 8
 712:	08 f0       	brcs	.+2      	; 0x716 <DIO_u8GetPinValue+0x30>
 714:	76 c0       	rjmp	.+236    	; 0x802 <DIO_u8GetPinValue+0x11c>
 716:	8c 81       	ldd	r24, Y+4	; 0x04
 718:	9d 81       	ldd	r25, Y+5	; 0x05
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	09 f4       	brne	.+2      	; 0x720 <DIO_u8GetPinValue+0x3a>
 71e:	71 c0       	rjmp	.+226    	; 0x802 <DIO_u8GetPinValue+0x11c>
	{
		switch(Copy_u8PortId)
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	3f 83       	std	Y+7, r19	; 0x07
 728:	2e 83       	std	Y+6, r18	; 0x06
 72a:	4e 81       	ldd	r20, Y+6	; 0x06
 72c:	5f 81       	ldd	r21, Y+7	; 0x07
 72e:	41 30       	cpi	r20, 0x01	; 1
 730:	51 05       	cpc	r21, r1
 732:	59 f1       	breq	.+86     	; 0x78a <DIO_u8GetPinValue+0xa4>
 734:	8e 81       	ldd	r24, Y+6	; 0x06
 736:	9f 81       	ldd	r25, Y+7	; 0x07
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	91 05       	cpc	r25, r1
 73c:	34 f4       	brge	.+12     	; 0x74a <DIO_u8GetPinValue+0x64>
 73e:	2e 81       	ldd	r18, Y+6	; 0x06
 740:	3f 81       	ldd	r19, Y+7	; 0x07
 742:	21 15       	cp	r18, r1
 744:	31 05       	cpc	r19, r1
 746:	69 f0       	breq	.+26     	; 0x762 <DIO_u8GetPinValue+0x7c>
 748:	5d c0       	rjmp	.+186    	; 0x804 <DIO_u8GetPinValue+0x11e>
 74a:	4e 81       	ldd	r20, Y+6	; 0x06
 74c:	5f 81       	ldd	r21, Y+7	; 0x07
 74e:	42 30       	cpi	r20, 0x02	; 2
 750:	51 05       	cpc	r21, r1
 752:	79 f1       	breq	.+94     	; 0x7b2 <DIO_u8GetPinValue+0xcc>
 754:	8e 81       	ldd	r24, Y+6	; 0x06
 756:	9f 81       	ldd	r25, Y+7	; 0x07
 758:	83 30       	cpi	r24, 0x03	; 3
 75a:	91 05       	cpc	r25, r1
 75c:	09 f4       	brne	.+2      	; 0x760 <DIO_u8GetPinValue+0x7a>
 75e:	3d c0       	rjmp	.+122    	; 0x7da <DIO_u8GetPinValue+0xf4>
 760:	51 c0       	rjmp	.+162    	; 0x804 <DIO_u8GetPinValue+0x11e>
		{
			case DIO_u8_PORTA: *Copy_u8ReturnedPinValue= Get_Bit(DIO_u8_PINA_REG,Copy_u8PinId);break;
 762:	e9 e3       	ldi	r30, 0x39	; 57
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	28 2f       	mov	r18, r24
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	88 2f       	mov	r24, r24
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	a9 01       	movw	r20, r18
 774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_u8GetPinValue+0x94>
 776:	55 95       	asr	r21
 778:	47 95       	ror	r20
 77a:	8a 95       	dec	r24
 77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_u8GetPinValue+0x90>
 77e:	ca 01       	movw	r24, r20
 780:	81 70       	andi	r24, 0x01	; 1
 782:	ec 81       	ldd	r30, Y+4	; 0x04
 784:	fd 81       	ldd	r31, Y+5	; 0x05
 786:	80 83       	st	Z, r24
 788:	3d c0       	rjmp	.+122    	; 0x804 <DIO_u8GetPinValue+0x11e>
			case DIO_u8_PORTB: *Copy_u8ReturnedPinValue= Get_Bit(DIO_u8_PINB_REG,Copy_u8PinId);break;
 78a:	e6 e3       	ldi	r30, 0x36	; 54
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	28 2f       	mov	r18, r24
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	88 2f       	mov	r24, r24
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	a9 01       	movw	r20, r18
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_u8GetPinValue+0xbc>
 79e:	55 95       	asr	r21
 7a0:	47 95       	ror	r20
 7a2:	8a 95       	dec	r24
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_u8GetPinValue+0xb8>
 7a6:	ca 01       	movw	r24, r20
 7a8:	81 70       	andi	r24, 0x01	; 1
 7aa:	ec 81       	ldd	r30, Y+4	; 0x04
 7ac:	fd 81       	ldd	r31, Y+5	; 0x05
 7ae:	80 83       	st	Z, r24
 7b0:	29 c0       	rjmp	.+82     	; 0x804 <DIO_u8GetPinValue+0x11e>
			case DIO_u8_PORTC: *Copy_u8ReturnedPinValue= Get_Bit(DIO_u8_PINC_REG,Copy_u8PinId);break;
 7b2:	e3 e3       	ldi	r30, 0x33	; 51
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	28 2f       	mov	r18, r24
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	88 2f       	mov	r24, r24
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	a9 01       	movw	r20, r18
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_u8GetPinValue+0xe4>
 7c6:	55 95       	asr	r21
 7c8:	47 95       	ror	r20
 7ca:	8a 95       	dec	r24
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_u8GetPinValue+0xe0>
 7ce:	ca 01       	movw	r24, r20
 7d0:	81 70       	andi	r24, 0x01	; 1
 7d2:	ec 81       	ldd	r30, Y+4	; 0x04
 7d4:	fd 81       	ldd	r31, Y+5	; 0x05
 7d6:	80 83       	st	Z, r24
 7d8:	15 c0       	rjmp	.+42     	; 0x804 <DIO_u8GetPinValue+0x11e>
			case DIO_u8_PORTD: *Copy_u8ReturnedPinValue= Get_Bit(DIO_u8_PIND_REG,Copy_u8PinId);break;
 7da:	e0 e3       	ldi	r30, 0x30	; 48
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	a9 01       	movw	r20, r18
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_u8GetPinValue+0x10c>
 7ee:	55 95       	asr	r21
 7f0:	47 95       	ror	r20
 7f2:	8a 95       	dec	r24
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_u8GetPinValue+0x108>
 7f6:	ca 01       	movw	r24, r20
 7f8:	81 70       	andi	r24, 0x01	; 1
 7fa:	ec 81       	ldd	r30, Y+4	; 0x04
 7fc:	fd 81       	ldd	r31, Y+5	; 0x05
 7fe:	80 83       	st	Z, r24
 800:	01 c0       	rjmp	.+2      	; 0x804 <DIO_u8GetPinValue+0x11e>

		}
	}
	else{
			Local_u8ErrorState=STD_TYPES_NOK;
 802:	19 82       	std	Y+1, r1	; 0x01
	    }
		return Local_u8ErrorState;
 804:	89 81       	ldd	r24, Y+1	; 0x01

}
 806:	27 96       	adiw	r28, 0x07	; 7
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	f8 94       	cli
 80c:	de bf       	out	0x3e, r29	; 62
 80e:	0f be       	out	0x3f, r0	; 63
 810:	cd bf       	out	0x3d, r28	; 61
 812:	cf 91       	pop	r28
 814:	df 91       	pop	r29
 816:	08 95       	ret

00000818 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 818:	df 93       	push	r29
 81a:	cf 93       	push	r28
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	2d 97       	sbiw	r28, 0x0d	; 13
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	f8 94       	cli
 826:	de bf       	out	0x3e, r29	; 62
 828:	0f be       	out	0x3f, r0	; 63
 82a:	cd bf       	out	0x3d, r28	; 61
 82c:	8a 83       	std	Y+2, r24	; 0x02
 82e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_OK;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId<=DIO_u8_PORTD)&&((Copy_u8PortDirection==DIO_u8_OUTPUT)||(Copy_u8PortDirection==DIO_u8_INPUT)) )
 834:	8a 81       	ldd	r24, Y+2	; 0x02
 836:	84 30       	cpi	r24, 0x04	; 4
 838:	08 f0       	brcs	.+2      	; 0x83c <DIO_u8SetPortDirection+0x24>
 83a:	84 c0       	rjmp	.+264    	; 0x944 <DIO_u8SetPortDirection+0x12c>
 83c:	8b 81       	ldd	r24, Y+3	; 0x03
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	21 f0       	breq	.+8      	; 0x84a <DIO_u8SetPortDirection+0x32>
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	88 23       	and	r24, r24
 846:	09 f0       	breq	.+2      	; 0x84a <DIO_u8SetPortDirection+0x32>
 848:	7d c0       	rjmp	.+250    	; 0x944 <DIO_u8SetPortDirection+0x12c>
	{
		switch (Copy_u8PortId)
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	28 2f       	mov	r18, r24
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	3d 87       	std	Y+13, r19	; 0x0d
 852:	2c 87       	std	Y+12, r18	; 0x0c
 854:	8c 85       	ldd	r24, Y+12	; 0x0c
 856:	9d 85       	ldd	r25, Y+13	; 0x0d
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	91 05       	cpc	r25, r1
 85c:	71 f1       	breq	.+92     	; 0x8ba <DIO_u8SetPortDirection+0xa2>
 85e:	2c 85       	ldd	r18, Y+12	; 0x0c
 860:	3d 85       	ldd	r19, Y+13	; 0x0d
 862:	22 30       	cpi	r18, 0x02	; 2
 864:	31 05       	cpc	r19, r1
 866:	2c f4       	brge	.+10     	; 0x872 <DIO_u8SetPortDirection+0x5a>
 868:	8c 85       	ldd	r24, Y+12	; 0x0c
 86a:	9d 85       	ldd	r25, Y+13	; 0x0d
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	69 f0       	breq	.+26     	; 0x88a <DIO_u8SetPortDirection+0x72>
 870:	6a c0       	rjmp	.+212    	; 0x946 <DIO_u8SetPortDirection+0x12e>
 872:	2c 85       	ldd	r18, Y+12	; 0x0c
 874:	3d 85       	ldd	r19, Y+13	; 0x0d
 876:	22 30       	cpi	r18, 0x02	; 2
 878:	31 05       	cpc	r19, r1
 87a:	b1 f1       	breq	.+108    	; 0x8e8 <DIO_u8SetPortDirection+0xd0>
 87c:	8c 85       	ldd	r24, Y+12	; 0x0c
 87e:	9d 85       	ldd	r25, Y+13	; 0x0d
 880:	83 30       	cpi	r24, 0x03	; 3
 882:	91 05       	cpc	r25, r1
 884:	09 f4       	brne	.+2      	; 0x888 <DIO_u8SetPortDirection+0x70>
 886:	47 c0       	rjmp	.+142    	; 0x916 <DIO_u8SetPortDirection+0xfe>
 888:	5e c0       	rjmp	.+188    	; 0x946 <DIO_u8SetPortDirection+0x12e>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
 88a:	8b 81       	ldd	r24, Y+3	; 0x03
 88c:	28 2f       	mov	r18, r24
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	3b 87       	std	Y+11, r19	; 0x0b
 892:	2a 87       	std	Y+10, r18	; 0x0a
 894:	8a 85       	ldd	r24, Y+10	; 0x0a
 896:	9b 85       	ldd	r25, Y+11	; 0x0b
 898:	00 97       	sbiw	r24, 0x00	; 0
 89a:	59 f0       	breq	.+22     	; 0x8b2 <DIO_u8SetPortDirection+0x9a>
 89c:	2a 85       	ldd	r18, Y+10	; 0x0a
 89e:	3b 85       	ldd	r19, Y+11	; 0x0b
 8a0:	21 30       	cpi	r18, 0x01	; 1
 8a2:	31 05       	cpc	r19, r1
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <DIO_u8SetPortDirection+0x90>
 8a6:	4f c0       	rjmp	.+158    	; 0x946 <DIO_u8SetPortDirection+0x12e>
			{
			case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
 8a8:	ea e3       	ldi	r30, 0x3A	; 58
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	80 83       	st	Z, r24
 8b0:	4a c0       	rjmp	.+148    	; 0x946 <DIO_u8SetPortDirection+0x12e>
			case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
 8b2:	ea e3       	ldi	r30, 0x3A	; 58
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	10 82       	st	Z, r1
 8b8:	46 c0       	rjmp	.+140    	; 0x946 <DIO_u8SetPortDirection+0x12e>
			}
			break;

			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
 8ba:	8b 81       	ldd	r24, Y+3	; 0x03
 8bc:	28 2f       	mov	r18, r24
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	39 87       	std	Y+9, r19	; 0x09
 8c2:	28 87       	std	Y+8, r18	; 0x08
 8c4:	88 85       	ldd	r24, Y+8	; 0x08
 8c6:	99 85       	ldd	r25, Y+9	; 0x09
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	51 f0       	breq	.+20     	; 0x8e0 <DIO_u8SetPortDirection+0xc8>
 8cc:	28 85       	ldd	r18, Y+8	; 0x08
 8ce:	39 85       	ldd	r19, Y+9	; 0x09
 8d0:	21 30       	cpi	r18, 0x01	; 1
 8d2:	31 05       	cpc	r19, r1
 8d4:	c1 f5       	brne	.+112    	; 0x946 <DIO_u8SetPortDirection+0x12e>
			{
			case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
 8d6:	e7 e3       	ldi	r30, 0x37	; 55
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	8f ef       	ldi	r24, 0xFF	; 255
 8dc:	80 83       	st	Z, r24
 8de:	33 c0       	rjmp	.+102    	; 0x946 <DIO_u8SetPortDirection+0x12e>
			case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
 8e0:	e7 e3       	ldi	r30, 0x37	; 55
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	10 82       	st	Z, r1
 8e6:	2f c0       	rjmp	.+94     	; 0x946 <DIO_u8SetPortDirection+0x12e>
			}
			break;

			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
 8e8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ea:	28 2f       	mov	r18, r24
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	3f 83       	std	Y+7, r19	; 0x07
 8f0:	2e 83       	std	Y+6, r18	; 0x06
 8f2:	8e 81       	ldd	r24, Y+6	; 0x06
 8f4:	9f 81       	ldd	r25, Y+7	; 0x07
 8f6:	00 97       	sbiw	r24, 0x00	; 0
 8f8:	51 f0       	breq	.+20     	; 0x90e <DIO_u8SetPortDirection+0xf6>
 8fa:	2e 81       	ldd	r18, Y+6	; 0x06
 8fc:	3f 81       	ldd	r19, Y+7	; 0x07
 8fe:	21 30       	cpi	r18, 0x01	; 1
 900:	31 05       	cpc	r19, r1
 902:	09 f5       	brne	.+66     	; 0x946 <DIO_u8SetPortDirection+0x12e>
			{
			case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
 904:	e4 e3       	ldi	r30, 0x34	; 52
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	80 83       	st	Z, r24
 90c:	1c c0       	rjmp	.+56     	; 0x946 <DIO_u8SetPortDirection+0x12e>
			case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
 90e:	e4 e3       	ldi	r30, 0x34	; 52
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	10 82       	st	Z, r1
 914:	18 c0       	rjmp	.+48     	; 0x946 <DIO_u8SetPortDirection+0x12e>
			}
			break;

			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
 916:	8b 81       	ldd	r24, Y+3	; 0x03
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	3d 83       	std	Y+5, r19	; 0x05
 91e:	2c 83       	std	Y+4, r18	; 0x04
 920:	8c 81       	ldd	r24, Y+4	; 0x04
 922:	9d 81       	ldd	r25, Y+5	; 0x05
 924:	00 97       	sbiw	r24, 0x00	; 0
 926:	51 f0       	breq	.+20     	; 0x93c <DIO_u8SetPortDirection+0x124>
 928:	2c 81       	ldd	r18, Y+4	; 0x04
 92a:	3d 81       	ldd	r19, Y+5	; 0x05
 92c:	21 30       	cpi	r18, 0x01	; 1
 92e:	31 05       	cpc	r19, r1
 930:	51 f4       	brne	.+20     	; 0x946 <DIO_u8SetPortDirection+0x12e>
			{
			case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
 932:	e1 e3       	ldi	r30, 0x31	; 49
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	80 83       	st	Z, r24
 93a:	05 c0       	rjmp	.+10     	; 0x946 <DIO_u8SetPortDirection+0x12e>
			case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
 93c:	e1 e3       	ldi	r30, 0x31	; 49
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	10 82       	st	Z, r1
 942:	01 c0       	rjmp	.+2      	; 0x946 <DIO_u8SetPortDirection+0x12e>

		}
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOK;
 944:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 946:	89 81       	ldd	r24, Y+1	; 0x01

}
 948:	2d 96       	adiw	r28, 0x0d	; 13
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	08 95       	ret

0000095a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue     (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	2d 97       	sbiw	r28, 0x0d	; 13
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	f8 94       	cli
 968:	de bf       	out	0x3e, r29	; 62
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	cd bf       	out	0x3d, r28	; 61
 96e:	8a 83       	std	Y+2, r24	; 0x02
 970:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_OK;
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId<=DIO_u8_PORTD)&&((Copy_u8PortValue==DIO_u8_HIGH)||(Copy_u8PortValue==DIO_u8_LOW)))
 976:	8a 81       	ldd	r24, Y+2	; 0x02
 978:	84 30       	cpi	r24, 0x04	; 4
 97a:	08 f0       	brcs	.+2      	; 0x97e <DIO_u8SetPortValue+0x24>
 97c:	84 c0       	rjmp	.+264    	; 0xa86 <DIO_u8SetPortValue+0x12c>
 97e:	8b 81       	ldd	r24, Y+3	; 0x03
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	21 f0       	breq	.+8      	; 0x98c <DIO_u8SetPortValue+0x32>
 984:	8b 81       	ldd	r24, Y+3	; 0x03
 986:	88 23       	and	r24, r24
 988:	09 f0       	breq	.+2      	; 0x98c <DIO_u8SetPortValue+0x32>
 98a:	7d c0       	rjmp	.+250    	; 0xa86 <DIO_u8SetPortValue+0x12c>
	{
		switch (Copy_u8PortId)
 98c:	8a 81       	ldd	r24, Y+2	; 0x02
 98e:	28 2f       	mov	r18, r24
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	3d 87       	std	Y+13, r19	; 0x0d
 994:	2c 87       	std	Y+12, r18	; 0x0c
 996:	8c 85       	ldd	r24, Y+12	; 0x0c
 998:	9d 85       	ldd	r25, Y+13	; 0x0d
 99a:	81 30       	cpi	r24, 0x01	; 1
 99c:	91 05       	cpc	r25, r1
 99e:	71 f1       	breq	.+92     	; 0x9fc <DIO_u8SetPortValue+0xa2>
 9a0:	2c 85       	ldd	r18, Y+12	; 0x0c
 9a2:	3d 85       	ldd	r19, Y+13	; 0x0d
 9a4:	22 30       	cpi	r18, 0x02	; 2
 9a6:	31 05       	cpc	r19, r1
 9a8:	2c f4       	brge	.+10     	; 0x9b4 <DIO_u8SetPortValue+0x5a>
 9aa:	8c 85       	ldd	r24, Y+12	; 0x0c
 9ac:	9d 85       	ldd	r25, Y+13	; 0x0d
 9ae:	00 97       	sbiw	r24, 0x00	; 0
 9b0:	69 f0       	breq	.+26     	; 0x9cc <DIO_u8SetPortValue+0x72>
 9b2:	6a c0       	rjmp	.+212    	; 0xa88 <DIO_u8SetPortValue+0x12e>
 9b4:	2c 85       	ldd	r18, Y+12	; 0x0c
 9b6:	3d 85       	ldd	r19, Y+13	; 0x0d
 9b8:	22 30       	cpi	r18, 0x02	; 2
 9ba:	31 05       	cpc	r19, r1
 9bc:	b1 f1       	breq	.+108    	; 0xa2a <DIO_u8SetPortValue+0xd0>
 9be:	8c 85       	ldd	r24, Y+12	; 0x0c
 9c0:	9d 85       	ldd	r25, Y+13	; 0x0d
 9c2:	83 30       	cpi	r24, 0x03	; 3
 9c4:	91 05       	cpc	r25, r1
 9c6:	09 f4       	brne	.+2      	; 0x9ca <DIO_u8SetPortValue+0x70>
 9c8:	47 c0       	rjmp	.+142    	; 0xa58 <DIO_u8SetPortValue+0xfe>
 9ca:	5e c0       	rjmp	.+188    	; 0xa88 <DIO_u8SetPortValue+0x12e>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortValue)
 9cc:	8b 81       	ldd	r24, Y+3	; 0x03
 9ce:	28 2f       	mov	r18, r24
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	3b 87       	std	Y+11, r19	; 0x0b
 9d4:	2a 87       	std	Y+10, r18	; 0x0a
 9d6:	8a 85       	ldd	r24, Y+10	; 0x0a
 9d8:	9b 85       	ldd	r25, Y+11	; 0x0b
 9da:	00 97       	sbiw	r24, 0x00	; 0
 9dc:	59 f0       	breq	.+22     	; 0x9f4 <DIO_u8SetPortValue+0x9a>
 9de:	2a 85       	ldd	r18, Y+10	; 0x0a
 9e0:	3b 85       	ldd	r19, Y+11	; 0x0b
 9e2:	21 30       	cpi	r18, 0x01	; 1
 9e4:	31 05       	cpc	r19, r1
 9e6:	09 f0       	breq	.+2      	; 0x9ea <DIO_u8SetPortValue+0x90>
 9e8:	4f c0       	rjmp	.+158    	; 0xa88 <DIO_u8SetPortValue+0x12e>
			{
				case DIO_u8_HIGH:DIO_u8_PORTA_REG= 0xff;break;
 9ea:	eb e3       	ldi	r30, 0x3B	; 59
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	8f ef       	ldi	r24, 0xFF	; 255
 9f0:	80 83       	st	Z, r24
 9f2:	4a c0       	rjmp	.+148    	; 0xa88 <DIO_u8SetPortValue+0x12e>
				case DIO_u8_LOW :DIO_u8_PORTA_REG= 0x00;break;
 9f4:	eb e3       	ldi	r30, 0x3B	; 59
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	10 82       	st	Z, r1
 9fa:	46 c0       	rjmp	.+140    	; 0xa88 <DIO_u8SetPortValue+0x12e>
			}
			break;

			case DIO_u8_PORTB:
			switch(Copy_u8PortValue)
 9fc:	8b 81       	ldd	r24, Y+3	; 0x03
 9fe:	28 2f       	mov	r18, r24
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	39 87       	std	Y+9, r19	; 0x09
 a04:	28 87       	std	Y+8, r18	; 0x08
 a06:	88 85       	ldd	r24, Y+8	; 0x08
 a08:	99 85       	ldd	r25, Y+9	; 0x09
 a0a:	00 97       	sbiw	r24, 0x00	; 0
 a0c:	51 f0       	breq	.+20     	; 0xa22 <DIO_u8SetPortValue+0xc8>
 a0e:	28 85       	ldd	r18, Y+8	; 0x08
 a10:	39 85       	ldd	r19, Y+9	; 0x09
 a12:	21 30       	cpi	r18, 0x01	; 1
 a14:	31 05       	cpc	r19, r1
 a16:	c1 f5       	brne	.+112    	; 0xa88 <DIO_u8SetPortValue+0x12e>
			{
				case DIO_u8_HIGH:DIO_u8_PORTB_REG= 0xff;break;
 a18:	e8 e3       	ldi	r30, 0x38	; 56
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	8f ef       	ldi	r24, 0xFF	; 255
 a1e:	80 83       	st	Z, r24
 a20:	33 c0       	rjmp	.+102    	; 0xa88 <DIO_u8SetPortValue+0x12e>
				case DIO_u8_LOW :DIO_u8_PORTB_REG= 0x00;break;
 a22:	e8 e3       	ldi	r30, 0x38	; 56
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	10 82       	st	Z, r1
 a28:	2f c0       	rjmp	.+94     	; 0xa88 <DIO_u8SetPortValue+0x12e>
			}
			break;

			case DIO_u8_PORTC:
			switch(Copy_u8PortValue)
 a2a:	8b 81       	ldd	r24, Y+3	; 0x03
 a2c:	28 2f       	mov	r18, r24
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	3f 83       	std	Y+7, r19	; 0x07
 a32:	2e 83       	std	Y+6, r18	; 0x06
 a34:	8e 81       	ldd	r24, Y+6	; 0x06
 a36:	9f 81       	ldd	r25, Y+7	; 0x07
 a38:	00 97       	sbiw	r24, 0x00	; 0
 a3a:	51 f0       	breq	.+20     	; 0xa50 <DIO_u8SetPortValue+0xf6>
 a3c:	2e 81       	ldd	r18, Y+6	; 0x06
 a3e:	3f 81       	ldd	r19, Y+7	; 0x07
 a40:	21 30       	cpi	r18, 0x01	; 1
 a42:	31 05       	cpc	r19, r1
 a44:	09 f5       	brne	.+66     	; 0xa88 <DIO_u8SetPortValue+0x12e>
			{
				case DIO_u8_HIGH:DIO_u8_PORTC_REG= 0xff;break;
 a46:	e5 e3       	ldi	r30, 0x35	; 53
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	8f ef       	ldi	r24, 0xFF	; 255
 a4c:	80 83       	st	Z, r24
 a4e:	1c c0       	rjmp	.+56     	; 0xa88 <DIO_u8SetPortValue+0x12e>
				case DIO_u8_LOW :DIO_u8_PORTC_REG= 0x00;break;
 a50:	e5 e3       	ldi	r30, 0x35	; 53
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	10 82       	st	Z, r1
 a56:	18 c0       	rjmp	.+48     	; 0xa88 <DIO_u8SetPortValue+0x12e>
			}
			break;

			case DIO_u8_PORTD:
			switch(Copy_u8PortValue)
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	28 2f       	mov	r18, r24
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	3d 83       	std	Y+5, r19	; 0x05
 a60:	2c 83       	std	Y+4, r18	; 0x04
 a62:	8c 81       	ldd	r24, Y+4	; 0x04
 a64:	9d 81       	ldd	r25, Y+5	; 0x05
 a66:	00 97       	sbiw	r24, 0x00	; 0
 a68:	51 f0       	breq	.+20     	; 0xa7e <DIO_u8SetPortValue+0x124>
 a6a:	2c 81       	ldd	r18, Y+4	; 0x04
 a6c:	3d 81       	ldd	r19, Y+5	; 0x05
 a6e:	21 30       	cpi	r18, 0x01	; 1
 a70:	31 05       	cpc	r19, r1
 a72:	51 f4       	brne	.+20     	; 0xa88 <DIO_u8SetPortValue+0x12e>
			{
				case DIO_u8_HIGH:DIO_u8_PORTD_REG= 0xff;break;
 a74:	e2 e3       	ldi	r30, 0x32	; 50
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	8f ef       	ldi	r24, 0xFF	; 255
 a7a:	80 83       	st	Z, r24
 a7c:	05 c0       	rjmp	.+10     	; 0xa88 <DIO_u8SetPortValue+0x12e>
				case DIO_u8_LOW :DIO_u8_PORTD_REG= 0x00;break;
 a7e:	e2 e3       	ldi	r30, 0x32	; 50
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	10 82       	st	Z, r1
 a84:	01 c0       	rjmp	.+2      	; 0xa88 <DIO_u8SetPortValue+0x12e>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOK;
 a86:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 a88:	89 81       	ldd	r24, Y+1	; 0x01
}
 a8a:	2d 96       	adiw	r28, 0x0d	; 13
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	f8 94       	cli
 a90:	de bf       	out	0x3e, r29	; 62
 a92:	0f be       	out	0x3f, r0	; 63
 a94:	cd bf       	out	0x3d, r28	; 61
 a96:	cf 91       	pop	r28
 a98:	df 91       	pop	r29
 a9a:	08 95       	ret

00000a9c <DIO_u8GetPORTValue>:

u8 DIO_u8GetPORTValue      (u8 Copy_u8PortId , u8 *Copy_u8ReturnedPortValue )
{
 a9c:	df 93       	push	r29
 a9e:	cf 93       	push	r28
 aa0:	00 d0       	rcall	.+0      	; 0xaa2 <DIO_u8GetPORTValue+0x6>
 aa2:	00 d0       	rcall	.+0      	; 0xaa4 <DIO_u8GetPORTValue+0x8>
 aa4:	00 d0       	rcall	.+0      	; 0xaa6 <DIO_u8GetPORTValue+0xa>
 aa6:	cd b7       	in	r28, 0x3d	; 61
 aa8:	de b7       	in	r29, 0x3e	; 62
 aaa:	8a 83       	std	Y+2, r24	; 0x02
 aac:	7c 83       	std	Y+4, r23	; 0x04
 aae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_OK;
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId<=DIO_u8_PORTD)&&(Copy_u8ReturnedPortValue!=NULL))
 ab4:	8a 81       	ldd	r24, Y+2	; 0x02
 ab6:	84 30       	cpi	r24, 0x04	; 4
 ab8:	08 f0       	brcs	.+2      	; 0xabc <DIO_u8GetPORTValue+0x20>
 aba:	3f c0       	rjmp	.+126    	; 0xb3a <DIO_u8GetPORTValue+0x9e>
 abc:	8b 81       	ldd	r24, Y+3	; 0x03
 abe:	9c 81       	ldd	r25, Y+4	; 0x04
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	d9 f1       	breq	.+118    	; 0xb3a <DIO_u8GetPORTValue+0x9e>
	{
		switch (Copy_u8PortId)
 ac4:	8a 81       	ldd	r24, Y+2	; 0x02
 ac6:	28 2f       	mov	r18, r24
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	3e 83       	std	Y+6, r19	; 0x06
 acc:	2d 83       	std	Y+5, r18	; 0x05
 ace:	8d 81       	ldd	r24, Y+5	; 0x05
 ad0:	9e 81       	ldd	r25, Y+6	; 0x06
 ad2:	81 30       	cpi	r24, 0x01	; 1
 ad4:	91 05       	cpc	r25, r1
 ad6:	e1 f0       	breq	.+56     	; 0xb10 <DIO_u8GetPORTValue+0x74>
 ad8:	2d 81       	ldd	r18, Y+5	; 0x05
 ada:	3e 81       	ldd	r19, Y+6	; 0x06
 adc:	22 30       	cpi	r18, 0x02	; 2
 ade:	31 05       	cpc	r19, r1
 ae0:	2c f4       	brge	.+10     	; 0xaec <DIO_u8GetPORTValue+0x50>
 ae2:	8d 81       	ldd	r24, Y+5	; 0x05
 ae4:	9e 81       	ldd	r25, Y+6	; 0x06
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	61 f0       	breq	.+24     	; 0xb02 <DIO_u8GetPORTValue+0x66>
 aea:	28 c0       	rjmp	.+80     	; 0xb3c <DIO_u8GetPORTValue+0xa0>
 aec:	2d 81       	ldd	r18, Y+5	; 0x05
 aee:	3e 81       	ldd	r19, Y+6	; 0x06
 af0:	22 30       	cpi	r18, 0x02	; 2
 af2:	31 05       	cpc	r19, r1
 af4:	a1 f0       	breq	.+40     	; 0xb1e <DIO_u8GetPORTValue+0x82>
 af6:	8d 81       	ldd	r24, Y+5	; 0x05
 af8:	9e 81       	ldd	r25, Y+6	; 0x06
 afa:	83 30       	cpi	r24, 0x03	; 3
 afc:	91 05       	cpc	r25, r1
 afe:	b1 f0       	breq	.+44     	; 0xb2c <DIO_u8GetPORTValue+0x90>
 b00:	1d c0       	rjmp	.+58     	; 0xb3c <DIO_u8GetPORTValue+0xa0>
		{
			case DIO_u8_PORTA:*Copy_u8ReturnedPortValue= DIO_u8_PINA_REG;break;
 b02:	e9 e3       	ldi	r30, 0x39	; 57
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	eb 81       	ldd	r30, Y+3	; 0x03
 b0a:	fc 81       	ldd	r31, Y+4	; 0x04
 b0c:	80 83       	st	Z, r24
 b0e:	16 c0       	rjmp	.+44     	; 0xb3c <DIO_u8GetPORTValue+0xa0>
			case DIO_u8_PORTB:*Copy_u8ReturnedPortValue= DIO_u8_PINB_REG;break;
 b10:	e6 e3       	ldi	r30, 0x36	; 54
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	80 81       	ld	r24, Z
 b16:	eb 81       	ldd	r30, Y+3	; 0x03
 b18:	fc 81       	ldd	r31, Y+4	; 0x04
 b1a:	80 83       	st	Z, r24
 b1c:	0f c0       	rjmp	.+30     	; 0xb3c <DIO_u8GetPORTValue+0xa0>
		    case DIO_u8_PORTC:*Copy_u8ReturnedPortValue= DIO_u8_PINC_REG;break;
 b1e:	e3 e3       	ldi	r30, 0x33	; 51
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	eb 81       	ldd	r30, Y+3	; 0x03
 b26:	fc 81       	ldd	r31, Y+4	; 0x04
 b28:	80 83       	st	Z, r24
 b2a:	08 c0       	rjmp	.+16     	; 0xb3c <DIO_u8GetPORTValue+0xa0>
			case DIO_u8_PORTD:*Copy_u8ReturnedPortValue= DIO_u8_PIND_REG;break;
 b2c:	e0 e3       	ldi	r30, 0x30	; 48
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	80 81       	ld	r24, Z
 b32:	eb 81       	ldd	r30, Y+3	; 0x03
 b34:	fc 81       	ldd	r31, Y+4	; 0x04
 b36:	80 83       	st	Z, r24
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <DIO_u8GetPORTValue+0xa0>
		}
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOK;
 b3a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 b3c:	89 81       	ldd	r24, Y+1	; 0x01
}
 b3e:	26 96       	adiw	r28, 0x06	; 6
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	f8 94       	cli
 b44:	de bf       	out	0x3e, r29	; 62
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	cd bf       	out	0x3d, r28	; 61
 b4a:	cf 91       	pop	r28
 b4c:	df 91       	pop	r29
 b4e:	08 95       	ret

00000b50 <PUSH_BUTTON_INIT>:
#include "../../MCAL/DIO/DIO.h"
#include "../../MCAL/EX_I/EX_I.h"
#include "../../MCAL/TIMERS/TIMER.h"
#include "PUSH_BUTTON.h"
void PUSH_BUTTON_INIT (void)
{
 b50:	df 93       	push	r29
 b52:	cf 93       	push	r28
 b54:	cd b7       	in	r28, 0x3d	; 61
 b56:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection (DIO_u8_PORTD , DIO_u8_PIN2 , DIO_u8_INPUT);
 b58:	83 e0       	ldi	r24, 0x03	; 3
 b5a:	62 e0       	ldi	r22, 0x02	; 2
 b5c:	40 e0       	ldi	r20, 0x00	; 0
 b5e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
}
 b62:	cf 91       	pop	r28
 b64:	df 91       	pop	r29
 b66:	08 95       	ret

00000b68 <CAR_LEDS_INIT>:
#include "../../MCAL/EX_I/EX_I.h"
#include "../../MCAL/TIMERS/TIMER.h"
#include "LED.h"

void CAR_LEDS_INIT (void)
{
 b68:	df 93       	push	r29
 b6a:	cf 93       	push	r28
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection (DIO_u8_PORTA , DIO_u8_PIN0 , DIO_u8_OUTPUT);
 b70:	80 e0       	ldi	r24, 0x00	; 0
 b72:	60 e0       	ldi	r22, 0x00	; 0
 b74:	41 e0       	ldi	r20, 0x01	; 1
 b76:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection (DIO_u8_PORTA , DIO_u8_PIN1 , DIO_u8_OUTPUT);
 b7a:	80 e0       	ldi	r24, 0x00	; 0
 b7c:	61 e0       	ldi	r22, 0x01	; 1
 b7e:	41 e0       	ldi	r20, 0x01	; 1
 b80:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection (DIO_u8_PORTA , DIO_u8_PIN2 , DIO_u8_OUTPUT);
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	62 e0       	ldi	r22, 0x02	; 2
 b88:	41 e0       	ldi	r20, 0x01	; 1
 b8a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
	DIO_u8SetPinValue (DIO_u8_PORTA , DIO_u8_PIN0 , DIO_u8_LOW);
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	60 e0       	ldi	r22, 0x00	; 0
 b92:	40 e0       	ldi	r20, 0x00	; 0
 b94:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
	DIO_u8SetPinValue (DIO_u8_PORTA , DIO_u8_PIN1 , DIO_u8_LOW);
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	61 e0       	ldi	r22, 0x01	; 1
 b9c:	40 e0       	ldi	r20, 0x00	; 0
 b9e:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
	DIO_u8SetPinValue (DIO_u8_PORTA , DIO_u8_PIN2 , DIO_u8_LOW);
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	62 e0       	ldi	r22, 0x02	; 2
 ba6:	40 e0       	ldi	r20, 0x00	; 0
 ba8:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
}
 bac:	cf 91       	pop	r28
 bae:	df 91       	pop	r29
 bb0:	08 95       	ret

00000bb2 <PEDSTRAINS_LEDS_INIT>:
void PEDSTRAINS_LEDS_INIT (void)
{
 bb2:	df 93       	push	r29
 bb4:	cf 93       	push	r28
 bb6:	cd b7       	in	r28, 0x3d	; 61
 bb8:	de b7       	in	r29, 0x3e	; 62
	 DIO_u8SetPinDirection (DIO_u8_PORTB , DIO_u8_PIN0 , DIO_u8_OUTPUT);
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	60 e0       	ldi	r22, 0x00	; 0
 bbe:	41 e0       	ldi	r20, 0x01	; 1
 bc0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
	 DIO_u8SetPinDirection (DIO_u8_PORTB , DIO_u8_PIN1 , DIO_u8_OUTPUT);
 bc4:	81 e0       	ldi	r24, 0x01	; 1
 bc6:	61 e0       	ldi	r22, 0x01	; 1
 bc8:	41 e0       	ldi	r20, 0x01	; 1
 bca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
     DIO_u8SetPinDirection (DIO_u8_PORTB , DIO_u8_PIN2 , DIO_u8_OUTPUT);
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	62 e0       	ldi	r22, 0x02	; 2
 bd2:	41 e0       	ldi	r20, 0x01	; 1
 bd4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_u8SetPinDirection>
     DIO_u8SetPinValue (DIO_u8_PORTB , DIO_u8_PIN0 , DIO_u8_LOW);
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	40 e0       	ldi	r20, 0x00	; 0
 bde:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
     DIO_u8SetPinValue (DIO_u8_PORTB , DIO_u8_PIN1 , DIO_u8_LOW);
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	61 e0       	ldi	r22, 0x01	; 1
 be6:	40 e0       	ldi	r20, 0x00	; 0
 be8:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
     DIO_u8SetPinValue (DIO_u8_PORTB , DIO_u8_PIN2 , DIO_u8_LOW);
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	62 e0       	ldi	r22, 0x02	; 2
 bf0:	40 e0       	ldi	r20, 0x00	; 0
 bf2:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
}
 bf6:	cf 91       	pop	r28
 bf8:	df 91       	pop	r29
 bfa:	08 95       	ret

00000bfc <LED_CAR_ON>:

void LED_CAR_ON (char PIN_NUMBER)
{
 bfc:	df 93       	push	r29
 bfe:	cf 93       	push	r28
 c00:	0f 92       	push	r0
 c02:	cd b7       	in	r28, 0x3d	; 61
 c04:	de b7       	in	r29, 0x3e	; 62
 c06:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue (DIO_u8_PORTA , PIN_NUMBER, DIO_u8_HIGH);
 c08:	80 e0       	ldi	r24, 0x00	; 0
 c0a:	69 81       	ldd	r22, Y+1	; 0x01
 c0c:	41 e0       	ldi	r20, 0x01	; 1
 c0e:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
}
 c12:	0f 90       	pop	r0
 c14:	cf 91       	pop	r28
 c16:	df 91       	pop	r29
 c18:	08 95       	ret

00000c1a <LED_CAR_OFF>:

void LED_CAR_OFF (char PIN_NUMBER)
{
 c1a:	df 93       	push	r29
 c1c:	cf 93       	push	r28
 c1e:	0f 92       	push	r0
 c20:	cd b7       	in	r28, 0x3d	; 61
 c22:	de b7       	in	r29, 0x3e	; 62
 c24:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue (DIO_u8_PORTA , PIN_NUMBER, DIO_u8_LOW);
 c26:	80 e0       	ldi	r24, 0x00	; 0
 c28:	69 81       	ldd	r22, Y+1	; 0x01
 c2a:	40 e0       	ldi	r20, 0x00	; 0
 c2c:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
}
 c30:	0f 90       	pop	r0
 c32:	cf 91       	pop	r28
 c34:	df 91       	pop	r29
 c36:	08 95       	ret

00000c38 <LED_PEDSTRAINS_ON>:

void LED_PEDSTRAINS_ON (char PIN_NUMBER)
{
 c38:	df 93       	push	r29
 c3a:	cf 93       	push	r28
 c3c:	0f 92       	push	r0
 c3e:	cd b7       	in	r28, 0x3d	; 61
 c40:	de b7       	in	r29, 0x3e	; 62
 c42:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue (DIO_u8_PORTB , PIN_NUMBER, DIO_u8_HIGH);
 c44:	81 e0       	ldi	r24, 0x01	; 1
 c46:	69 81       	ldd	r22, Y+1	; 0x01
 c48:	41 e0       	ldi	r20, 0x01	; 1
 c4a:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
}
 c4e:	0f 90       	pop	r0
 c50:	cf 91       	pop	r28
 c52:	df 91       	pop	r29
 c54:	08 95       	ret

00000c56 <LED_PEDSTRAINS_OFF>:

void LED_PEDSTRAINS_OFF (char PIN_NUMBER)
{
 c56:	df 93       	push	r29
 c58:	cf 93       	push	r28
 c5a:	0f 92       	push	r0
 c5c:	cd b7       	in	r28, 0x3d	; 61
 c5e:	de b7       	in	r29, 0x3e	; 62
 c60:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue (DIO_u8_PORTB , PIN_NUMBER, DIO_u8_LOW);
 c62:	81 e0       	ldi	r24, 0x01	; 1
 c64:	69 81       	ldd	r22, Y+1	; 0x01
 c66:	40 e0       	ldi	r20, 0x00	; 0
 c68:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_u8SetPinValue>
}
 c6c:	0f 90       	pop	r0
 c6e:	cf 91       	pop	r28
 c70:	df 91       	pop	r29
 c72:	08 95       	ret

00000c74 <CAR_PRIORITY>:

void CAR_PRIORITY (void)
{
 c74:	df 93       	push	r29
 c76:	cf 93       	push	r28
 c78:	cd b7       	in	r28, 0x3d	; 61
 c7a:	de b7       	in	r29, 0x3e	; 62
	LED_CAR_ON (GREEN);
 c7c:	82 e0       	ldi	r24, 0x02	; 2
 c7e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LED_CAR_ON>
	LED_CAR_OFF (YELLOW);
 c82:	81 e0       	ldi	r24, 0x01	; 1
 c84:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_CAR_OFF>
	LED_CAR_OFF (RED);
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_CAR_OFF>

	LED_PEDSTRAINS_ON (RED);
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	0e 94 1c 06 	call	0xc38	; 0xc38 <LED_PEDSTRAINS_ON>
	LED_PEDSTRAINS_OFF (YELLOW);
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	0e 94 2b 06 	call	0xc56	; 0xc56 <LED_PEDSTRAINS_OFF>
	LED_PEDSTRAINS_OFF (GREEN);
 c9a:	82 e0       	ldi	r24, 0x02	; 2
 c9c:	0e 94 2b 06 	call	0xc56	; 0xc56 <LED_PEDSTRAINS_OFF>
}
 ca0:	cf 91       	pop	r28
 ca2:	df 91       	pop	r29
 ca4:	08 95       	ret

00000ca6 <PEDSTRAINS_PRIORITY>:

void PEDSTRAINS_PRIORITY (void)
{
 ca6:	df 93       	push	r29
 ca8:	cf 93       	push	r28
 caa:	cd b7       	in	r28, 0x3d	; 61
 cac:	de b7       	in	r29, 0x3e	; 62
	    LED_PEDSTRAINS_ON (GREEN);
 cae:	82 e0       	ldi	r24, 0x02	; 2
 cb0:	0e 94 1c 06 	call	0xc38	; 0xc38 <LED_PEDSTRAINS_ON>
		LED_PEDSTRAINS_OFF (YELLOW);
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	0e 94 2b 06 	call	0xc56	; 0xc56 <LED_PEDSTRAINS_OFF>
		LED_PEDSTRAINS_OFF (RED);
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	0e 94 2b 06 	call	0xc56	; 0xc56 <LED_PEDSTRAINS_OFF>

		LED_CAR_ON (RED);
 cc0:	80 e0       	ldi	r24, 0x00	; 0
 cc2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LED_CAR_ON>
		LED_CAR_OFF (YELLOW);
 cc6:	81 e0       	ldi	r24, 0x01	; 1
 cc8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_CAR_OFF>
		LED_CAR_OFF (GREEN);
 ccc:	82 e0       	ldi	r24, 0x02	; 2
 cce:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_CAR_OFF>

}
 cd2:	cf 91       	pop	r28
 cd4:	df 91       	pop	r29
 cd6:	08 95       	ret

00000cd8 <YELLOW_BLINK>:

void YELLOW_BLINK (void)
{
 cd8:	df 93       	push	r29
 cda:	cf 93       	push	r28
 cdc:	0f 92       	push	r0
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
	char i=0;
 ce2:	19 82       	std	Y+1, r1	; 0x01
 ce4:	15 c0       	rjmp	.+42     	; 0xd10 <YELLOW_BLINK+0x38>
	for ( ;i<5 ;i++)
	{
	LED_PEDSTRAINS_ON (YELLOW);
 ce6:	81 e0       	ldi	r24, 0x01	; 1
 ce8:	0e 94 1c 06 	call	0xc38	; 0xc38 <LED_PEDSTRAINS_ON>
	LED_CAR_ON (YELLOW);
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LED_CAR_ON>
	TIMER0_INIT_DELAY_halfseconds(HALF_SECOND);
 cf2:	81 e0       	ldi	r24, 0x01	; 1
 cf4:	0e 94 41 00 	call	0x82	; 0x82 <TIMER0_INIT_DELAY_halfseconds>
	LED_PEDSTRAINS_OFF (YELLOW);
 cf8:	81 e0       	ldi	r24, 0x01	; 1
 cfa:	0e 94 2b 06 	call	0xc56	; 0xc56 <LED_PEDSTRAINS_OFF>
	LED_CAR_OFF (YELLOW);
 cfe:	81 e0       	ldi	r24, 0x01	; 1
 d00:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_CAR_OFF>
	TIMER0_INIT_DELAY_halfseconds(HALF_SECOND);
 d04:	81 e0       	ldi	r24, 0x01	; 1
 d06:	0e 94 41 00 	call	0x82	; 0x82 <TIMER0_INIT_DELAY_halfseconds>
}

void YELLOW_BLINK (void)
{
	char i=0;
	for ( ;i<5 ;i++)
 d0a:	89 81       	ldd	r24, Y+1	; 0x01
 d0c:	8f 5f       	subi	r24, 0xFF	; 255
 d0e:	89 83       	std	Y+1, r24	; 0x01
 d10:	89 81       	ldd	r24, Y+1	; 0x01
 d12:	85 30       	cpi	r24, 0x05	; 5
 d14:	40 f3       	brcs	.-48     	; 0xce6 <YELLOW_BLINK+0xe>
	TIMER0_INIT_DELAY_halfseconds(HALF_SECOND);
	LED_PEDSTRAINS_OFF (YELLOW);
	LED_CAR_OFF (YELLOW);
	TIMER0_INIT_DELAY_halfseconds(HALF_SECOND);
	}
}
 d16:	0f 90       	pop	r0
 d18:	cf 91       	pop	r28
 d1a:	df 91       	pop	r29
 d1c:	08 95       	ret

00000d1e <TRANSIENT_CASE>:
void TRANSIENT_CASE (void)
{
 d1e:	df 93       	push	r29
 d20:	cf 93       	push	r28
 d22:	cd b7       	in	r28, 0x3d	; 61
 d24:	de b7       	in	r29, 0x3e	; 62
	LED_CAR_OFF (GREEN);
 d26:	82 e0       	ldi	r24, 0x02	; 2
 d28:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_CAR_OFF>
	LED_CAR_OFF (RED);
 d2c:	80 e0       	ldi	r24, 0x00	; 0
 d2e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_CAR_OFF>

	LED_PEDSTRAINS_OFF (GREEN);
 d32:	82 e0       	ldi	r24, 0x02	; 2
 d34:	0e 94 2b 06 	call	0xc56	; 0xc56 <LED_PEDSTRAINS_OFF>
	LED_PEDSTRAINS_OFF (RED);
 d38:	80 e0       	ldi	r24, 0x00	; 0
 d3a:	0e 94 2b 06 	call	0xc56	; 0xc56 <LED_PEDSTRAINS_OFF>
	YELLOW_BLINK ();
 d3e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <YELLOW_BLINK>

}
 d42:	cf 91       	pop	r28
 d44:	df 91       	pop	r29
 d46:	08 95       	ret

00000d48 <GET_PORT_STATE>:

char GET_PORT_STATE (void)
{
 d48:	df 93       	push	r29
 d4a:	cf 93       	push	r28
 d4c:	cd b7       	in	r28, 0x3d	; 61
 d4e:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8_PINA_REG ;
 d50:	e9 e3       	ldi	r30, 0x39	; 57
 d52:	f0 e0       	ldi	r31, 0x00	; 0
 d54:	80 81       	ld	r24, Z

}
 d56:	cf 91       	pop	r28
 d58:	df 91       	pop	r29
 d5a:	08 95       	ret

00000d5c <ALL_INIT>:
#include "../MCAL/TIMERS/TIMER.h"
#include "../HAL/LEDS/LED.h"
#include "../HAL/PUSH_BUTTON/PUSH_BUTTON.h"
#include "APPLICATION.h"
void ALL_INIT ()
{
 d5c:	df 93       	push	r29
 d5e:	cf 93       	push	r28
 d60:	cd b7       	in	r28, 0x3d	; 61
 d62:	de b7       	in	r29, 0x3e	; 62
	EXI0_INIT ();
 d64:	0e 94 8a 00 	call	0x114	; 0x114 <EXI0_INIT>
	PUSH_BUTTON_INIT ();
 d68:	0e 94 a8 05 	call	0xb50	; 0xb50 <PUSH_BUTTON_INIT>
    CAR_LEDS_INIT ();
 d6c:	0e 94 b4 05 	call	0xb68	; 0xb68 <CAR_LEDS_INIT>
    PEDSTRAINS_LEDS_INIT ();
 d70:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <PEDSTRAINS_LEDS_INIT>
}
 d74:	cf 91       	pop	r28
 d76:	df 91       	pop	r29
 d78:	08 95       	ret

00000d7a <NORMAL_MODE>:

void NORMAL_MODE (void)
{
 d7a:	df 93       	push	r29
 d7c:	cf 93       	push	r28
 d7e:	cd b7       	in	r28, 0x3d	; 61
 d80:	de b7       	in	r29, 0x3e	; 62
	CAR_PRIORITY ();
 d82:	0e 94 3a 06 	call	0xc74	; 0xc74 <CAR_PRIORITY>
	TIMER0_INIT_DELAY_halfseconds (FIVE_SECONS);
 d86:	8a e0       	ldi	r24, 0x0A	; 10
 d88:	0e 94 41 00 	call	0x82	; 0x82 <TIMER0_INIT_DELAY_halfseconds>
	TRANSIENT_CASE ();
 d8c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <TRANSIENT_CASE>
	PEDSTRAINS_PRIORITY ();
 d90:	0e 94 53 06 	call	0xca6	; 0xca6 <PEDSTRAINS_PRIORITY>
	TIMER0_INIT_DELAY_halfseconds (FIVE_SECONS);
 d94:	8a e0       	ldi	r24, 0x0A	; 10
 d96:	0e 94 41 00 	call	0x82	; 0x82 <TIMER0_INIT_DELAY_halfseconds>
	TRANSIENT_CASE ();
 d9a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <TRANSIENT_CASE>
}
 d9e:	cf 91       	pop	r28
 da0:	df 91       	pop	r29
 da2:	08 95       	ret

00000da4 <GREEN_REEDING_WITH_PESS>:


void GREEN_REEDING_WITH_PESS (void)
{
 da4:	df 93       	push	r29
 da6:	cf 93       	push	r28
 da8:	cd b7       	in	r28, 0x3d	; 61
 daa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_INIT_DELAY_halfseconds (FIVE_SECONS);
 dac:	8a e0       	ldi	r24, 0x0A	; 10
 dae:	0e 94 41 00 	call	0x82	; 0x82 <TIMER0_INIT_DELAY_halfseconds>
	TRANSIENT_CASE ();
 db2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <TRANSIENT_CASE>
	PEDSTRAINS_PRIORITY ();
 db6:	0e 94 53 06 	call	0xca6	; 0xca6 <PEDSTRAINS_PRIORITY>
	TIMER0_INIT_DELAY_halfseconds (FIVE_SECONS);
 dba:	8a e0       	ldi	r24, 0x0A	; 10
 dbc:	0e 94 41 00 	call	0x82	; 0x82 <TIMER0_INIT_DELAY_halfseconds>
	TRANSIENT_CASE ();
 dc0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <TRANSIENT_CASE>
	NORMAL_MODE ();
 dc4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <NORMAL_MODE>
}
 dc8:	cf 91       	pop	r28
 dca:	df 91       	pop	r29
 dcc:	08 95       	ret

00000dce <YELLOW_REEDING_WITH_PESS>:


void YELLOW_REEDING_WITH_PESS (void)
{
 dce:	df 93       	push	r29
 dd0:	cf 93       	push	r28
 dd2:	cd b7       	in	r28, 0x3d	; 61
 dd4:	de b7       	in	r29, 0x3e	; 62
	TRANSIENT_CASE ();
 dd6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <TRANSIENT_CASE>
	PEDSTRAINS_PRIORITY ();
 dda:	0e 94 53 06 	call	0xca6	; 0xca6 <PEDSTRAINS_PRIORITY>
	TIMER0_INIT_DELAY_halfseconds (FIVE_SECONS);
 dde:	8a e0       	ldi	r24, 0x0A	; 10
 de0:	0e 94 41 00 	call	0x82	; 0x82 <TIMER0_INIT_DELAY_halfseconds>
	TRANSIENT_CASE ();
 de4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <TRANSIENT_CASE>
	NORMAL_MODE ();
 de8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <NORMAL_MODE>

}
 dec:	cf 91       	pop	r28
 dee:	df 91       	pop	r29
 df0:	08 95       	ret

00000df2 <__vector_1>:
#include "APPLICATION/APPLICATION.h"
#include <avr/interrupt.h>
volatile char FLAGE = 55 ; //Volatile to prevent the optimizer from deleting this variable

ISR (INT0_vect)
{
 df2:	1f 92       	push	r1
 df4:	0f 92       	push	r0
 df6:	0f b6       	in	r0, 0x3f	; 63
 df8:	0f 92       	push	r0
 dfa:	11 24       	eor	r1, r1
 dfc:	2f 93       	push	r18
 dfe:	3f 93       	push	r19
 e00:	4f 93       	push	r20
 e02:	5f 93       	push	r21
 e04:	6f 93       	push	r22
 e06:	7f 93       	push	r23
 e08:	8f 93       	push	r24
 e0a:	9f 93       	push	r25
 e0c:	af 93       	push	r26
 e0e:	bf 93       	push	r27
 e10:	ef 93       	push	r30
 e12:	ff 93       	push	r31
 e14:	df 93       	push	r29
 e16:	cf 93       	push	r28
 e18:	00 d0       	rcall	.+0      	; 0xe1a <__vector_1+0x28>
 e1a:	cd b7       	in	r28, 0x3d	; 61
 e1c:	de b7       	in	r29, 0x3e	; 62
	EXI0_DISABLE ();
 e1e:	0e 94 b7 00 	call	0x16e	; 0x16e <EXI0_DISABLE>
	FLAGE =  GET_PORT_STATE ();
 e22:	0e 94 a4 06 	call	0xd48	; 0xd48 <GET_PORT_STATE>
 e26:	80 93 60 00 	sts	0x0060, r24
	switch (FLAGE)
 e2a:	80 91 60 00 	lds	r24, 0x0060
 e2e:	28 2f       	mov	r18, r24
 e30:	30 e0       	ldi	r19, 0x00	; 0
 e32:	3a 83       	std	Y+2, r19	; 0x02
 e34:	29 83       	std	Y+1, r18	; 0x01
 e36:	89 81       	ldd	r24, Y+1	; 0x01
 e38:	9a 81       	ldd	r25, Y+2	; 0x02
 e3a:	81 30       	cpi	r24, 0x01	; 1
 e3c:	91 05       	cpc	r25, r1
 e3e:	d1 f0       	breq	.+52     	; 0xe74 <__vector_1+0x82>
 e40:	29 81       	ldd	r18, Y+1	; 0x01
 e42:	3a 81       	ldd	r19, Y+2	; 0x02
 e44:	22 30       	cpi	r18, 0x02	; 2
 e46:	31 05       	cpc	r19, r1
 e48:	2c f4       	brge	.+10     	; 0xe54 <__vector_1+0x62>
 e4a:	89 81       	ldd	r24, Y+1	; 0x01
 e4c:	9a 81       	ldd	r25, Y+2	; 0x02
 e4e:	00 97       	sbiw	r24, 0x00	; 0
 e50:	61 f0       	breq	.+24     	; 0xe6a <__vector_1+0x78>
 e52:	10 c0       	rjmp	.+32     	; 0xe74 <__vector_1+0x82>
 e54:	29 81       	ldd	r18, Y+1	; 0x01
 e56:	3a 81       	ldd	r19, Y+2	; 0x02
 e58:	22 30       	cpi	r18, 0x02	; 2
 e5a:	31 05       	cpc	r19, r1
 e5c:	31 f0       	breq	.+12     	; 0xe6a <__vector_1+0x78>
 e5e:	89 81       	ldd	r24, Y+1	; 0x01
 e60:	9a 81       	ldd	r25, Y+2	; 0x02
 e62:	84 30       	cpi	r24, 0x04	; 4
 e64:	91 05       	cpc	r25, r1
 e66:	21 f0       	breq	.+8      	; 0xe70 <__vector_1+0x7e>
 e68:	05 c0       	rjmp	.+10     	; 0xe74 <__vector_1+0x82>

				case 0x01:
					break;
				case 0x02:
				case 0x00:
					YELLOW_REEDING_WITH_PESS ();
 e6a:	0e 94 e7 06 	call	0xdce	; 0xdce <YELLOW_REEDING_WITH_PESS>
 e6e:	02 c0       	rjmp	.+4      	; 0xe74 <__vector_1+0x82>
					break;
				case 0x04:
					GREEN_REEDING_WITH_PESS ();
 e70:	0e 94 d2 06 	call	0xda4	; 0xda4 <GREEN_REEDING_WITH_PESS>
					break;


				}
	EXI0_INIT ();
 e74:	0e 94 8a 00 	call	0x114	; 0x114 <EXI0_INIT>
	SET_INTERRUPT_FLAGE ();
 e78:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SET_INTERRUPT_FLAGE>
}
 e7c:	0f 90       	pop	r0
 e7e:	0f 90       	pop	r0
 e80:	cf 91       	pop	r28
 e82:	df 91       	pop	r29
 e84:	ff 91       	pop	r31
 e86:	ef 91       	pop	r30
 e88:	bf 91       	pop	r27
 e8a:	af 91       	pop	r26
 e8c:	9f 91       	pop	r25
 e8e:	8f 91       	pop	r24
 e90:	7f 91       	pop	r23
 e92:	6f 91       	pop	r22
 e94:	5f 91       	pop	r21
 e96:	4f 91       	pop	r20
 e98:	3f 91       	pop	r19
 e9a:	2f 91       	pop	r18
 e9c:	0f 90       	pop	r0
 e9e:	0f be       	out	0x3f, r0	; 63
 ea0:	0f 90       	pop	r0
 ea2:	1f 90       	pop	r1
 ea4:	18 95       	reti

00000ea6 <main>:
int main (void)
{
 ea6:	df 93       	push	r29
 ea8:	cf 93       	push	r28
 eaa:	cd b7       	in	r28, 0x3d	; 61
 eac:	de b7       	in	r29, 0x3e	; 62
	ALL_INIT ();
 eae:	0e 94 ae 06 	call	0xd5c	; 0xd5c <ALL_INIT>

		while(1)
			{
			NORMAL_MODE ();
 eb2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <NORMAL_MODE>
 eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <main+0xc>

00000eb8 <_exit>:
 eb8:	f8 94       	cli

00000eba <__stop_program>:
 eba:	ff cf       	rjmp	.-2      	; 0xeba <__stop_program>
